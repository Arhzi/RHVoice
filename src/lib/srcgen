# Reminder to myself:
# change to this directory and run "scons -f srcgen"
import os.path

BUILDDIR=os.path.join("..","..","build")
Execute(Mkdir(BUILDDIR))
SConsignFile(os.path.join(BUILDDIR,"srcgen"))

env=Environment()

lts_list=[
    ("ru_consonants_lts","ru_consonants_lts.scm"),
    ("en_consonants_lts","en_consonants_lts.scm"),
    ("ru_en_lts","ru_en_lts.scm"),
    ("ru_lts","ru_lts.scm"),
    ("ru_number_lts","ru_number_lts.scm")]

cart_list=[
    ("ru_stress","ru_stress_tree.scm","ru_stress_tree"),
    ("ru_vowel_reduction","ru_vowel_reduction.scm","ru_vowel_reduction_tree"),
    ("ru_vpair","ru_consonant_vpairs.scm","ru_vpair_tree")]

festival=os.path.join(os.environ["ESTDIR"],"..","festival","bin","festival")
if not os.path.isfile(festival):
    print("Cannot find festival")
    exit(1)
env["FESTIVAL"]=festival
flite_tools_dir=os.path.join(os.environ["FLITEDIR"],"tools")
if not os.path.isdir(flite_tools_dir):
    print("Cannot find flite tools directory")
    exit(1)
env["MKCART"]=os.path.join(flite_tools_dir,"make_cart.scm")
env["MKLTSREWRITE"]=os.path.join(flite_tools_dir,"make_lts_rewrite.scm")
env["MKPHONESET"]=os.path.join(flite_tools_dir,"make_phoneset.scm")
env["MKVALLIST"]=os.path.join(flite_tools_dir,"make_vallist.scm")
scm_dir=os.path.join("..","festival","lib")
phoneset_command='$FESTIVAL -b $MKPHONESET \'(phonesettoC "ru" (car (load "$SOURCE" t)) "pau" "${TARGET.dir}")\''
env.Command("ru_phoneset.c","ru_phoneset.scm",phoneset_command,srcdir=scm_dir)
cart_command='$FESTIVAL -b $MKCART $SOURCE \'(carttoC "$NAME" $TREE "${TARGET.dir}")\''     
for s1,s2,s3 in cart_list:
    env.Command(s1+"_cart.c",s2,cart_command,NAME=s1,TREE=s3,srcdir=scm_dir)
lts_command='$FESTIVAL -b $MKVALLIST $MKLTSREWRITE \'(ltsrewritestoC "${TARGET.filebase}" "$SOURCE" "${TARGET.dir}")\'' 
for s1,s2 in lts_list:
    env.Command(s1+".c",s2,lts_command,srcdir=scm_dir)

import codecs
def convert_dict(target=None,source=None,env=None):
    f_in=codecs.open(str(source[0]),"rb","UTF-8")
    f_in.readline()
    entries=[tuple(line.strip("\n() ").split()[:2]) for line in f_in if not line.isspace()]
    f_in.close()
    f_out=open(str(target[1]),"wb")
    f_out.write("#ifndef RU_DICT_H\n")
    f_out.write("#define RU_DICT_H\n")
    f_out.write("typedef struct ru_dict_entry_struct {const char *word; signed char stress;} ru_dict_entry;\n")
    f_out.write("extern const ru_dict_entry ru_dict[];\n")
    f_out.write("#define ru_dict_size %d\n" % len(entries))
    f_out.write("#endif\n")
    f_out.close()
    f_out=codecs.open(str(target[0]),"wb","UTF-8")
    f_out.write('#include "ru_dict.h"\n\n')
    f_out.write("const ru_dict_entry ru_dict[]={\n")
    f_out.write(u",\n".join([u"{%s,%s}" % e for e in entries]))
    f_out.write("};\n")
    f_out.close()
    return 0

dict_action=Action(convert_dict,"Converting the dictionary")
env.Command(["ru_dict.c","ru_dict.h"],"ru_dict",dict_action,srcdir=scm_dir)
