import os.path
Import(["env","lib_objects"])
local_env=env.Clone()
local_env.Append(CPPPATH=os.path.join("..","hts_engine_api","include"))
if "gcc" in local_env["TOOLS"] or "mingw" in local_env["TOOLS"]:
    local_env.Append(CPPFLAGS="-finput-charset=UTF-8")
    local_env.Append(CFLAGS="-Wno-unused-function")
    if os.path.sep=="\\":
        local_env.Append(CPPDEFINES=("path_sep",(r'\"\\\%s\"' % os.path.sep)))
    else:
        local_env.Append(CPPDEFINES=("path_sep",(r'\"\%s\"' % os.path.sep)))
local_env.Append(CPPDEFINES=("SONIC_USE_SIN",1))
lib_name="RHVoice"
src=Glob("*.c")
if env["PLATFORM"]=="win32":
    objects=local_env.SharedObject(src)
else:
    objects=local_env.StaticObject(src)
lib_objects.extend(objects)
if env["PLATFORM"]=="win32":
    dll=local_env.SharedLibrary(lib_name,lib_objects+["lib.def"],no_import_lib=True)
    Import("sapi_env")
    if sapi_env["enabled"]:
        sapi_env.Command(lib_name+".lib",["lib.def",dll],"lib /machine:x86 /def:${SOURCES[0]} /out:$TARGET")
        sapi_env.Prepend(LIBS=lib_name)
        sapi_env.Prepend(LIBPATH=os.path.join("..","lib"))
else:
    local_env.StaticLibrary(lib_name,lib_objects)
